library(tidyverse)
# ----Datos----
indir <- "/Users/sofiasalazar/Desktop/LAB/ViernesBioinfo2024/Clase_Heatmaps/"
# datos de expresion (altamente filtrados)
exprMat <- read.csv(paste0(indir, "data/small_counts.csv"), header = T)
# metadatos (no reales)
metadata <- read.csv(paste0(indir, "data/metadata.csv"), header = T)
# ----Crear matriz para heatmap----
hMat <- exprMat %>%
column_to_rownames("gene") %>%
as.matrix()
# ----Heatmap base----
library(ComplexHeatmap)
# Lo unico que necesitamos, es una matriz de numeros
dim(hMat)
# el heatmap mas simple
Heatmap(hMat)
# quitemos los nombres de los genes
Heatmap(hMat, show_row_names = F)
# agregamos un nombre al color primario
Heatmap(hMat, show_row_names = F, name = "Z-score")
Heatmap(hMat, show_row_names = F, name = "Z-score", cluster_rows = F, cluster_columns = F)
new_column_order <- c("SRR12363092", "SRR12363093", "SRR12363102", "SRR12363101" , "SRR12363095",
"SRR12363096", "SRR12363098", "SRR12363099")
hMat_ordered <- hMat[,new_column_order]
Heatmap(hMat_ordered, show_row_names = F, name = "Z-score", cluster_rows = F, cluster_columns = F)
# Por default, los colores siempre son azul, blanco y rojo
library(circlize)
# creamos una gama de colores personalizada
breaks <- c(min(hMat), 0, max(hMat))
col_exp <- colorRamp2(breaks, c('darkblue','white', '#736f01'))
Heatmap(hMat_ordered, show_row_names = F, name = "Z-score", cluster_rows = F,
cluster_columns = F, col = col_exp)
breaks <- c(min(hMat),-1, 0, 1,max(hMat))
col_exp <- colorRamp2(breaks, c('darkblue', 'blue', 'white', 'red', 'darkred'))
Heatmap(hMat_ordered, show_row_names = F, name = "Z-score", cluster_rows = F,
cluster_columns = F, col = col_exp)
# ----Anotacion de color: valores discretos----
# se necesita una lista nombrada
color_mice <- c("beige" = "#ffecad", "black"= "black", "black" = "black",
"beige"= "#ffecad","gray"= "darkgray","gray" = "darkgray",
"black"= "black", "beige"= "#ffecad")
color_anno <- HeatmapAnnotation("Mouse color" = metadata$color, col = list("Mouse color" = color_mice))
# podemos ponerla arriba o abajo
Heatmap(hMat_ordered, show_column_names = F, show_row_names = F, name = "Z-score", cluster_rows = F,
cluster_columns = F, col = col_exp, top_annotation = color_anno)
Heatmap(hMat_ordered, show_column_names = F, show_row_names = F, name = "Z-score", cluster_rows = F,
cluster_columns = F, col = col_exp, bottom_annotation = color_anno)
# para valores continuos es mejor crear una gama de colores
col_month <- colorRamp2(c(0, min(metadata$months), max(metadata$months)),
c("white", "#fac3e8", "#a60c72"))
month_anno <- HeatmapAnnotation("Age (months)" = metadata$months, col = list("Age (months)" = col_month))
Heatmap(hMat_ordered, show_column_names = F, show_row_names = F, name = "Z-score", cluster_rows = F,
cluster_columns = F, col = col_exp, bottom_annotation = c(color_anno, month_anno) )
col_weight <- colorRamp2(c(0, min(metadata$weight), max(metadata$weight)),
c("white", "#7bc982", "#013d06"))
weight_anno <- HeatmapAnnotation("Weight (gr)" = metadata$weight, col = list("Weight (gr)" = col_weight))
Heatmap(hMat_ordered, show_column_names = F, show_row_names = F, name = "Z-score", cluster_rows = F,
cluster_columns = F, col = col_exp, top_annotation = c(color_anno, month_anno,weight_anno) )
# ----Anotacion de condicion: valores discretos----
# se necesita una lista nombrada
col_condition <- c("control"="#0478b3", "treated" = "#5f0778")
condition_anno <- HeatmapAnnotation("Condition" = metadata$condition, col = list("Condition" = col_condition))
Heatmap(hMat_ordered, show_column_names = F, show_row_names = F, name = "Z-score", cluster_rows = F,
cluster_columns = F, col = col_exp,
top_annotation = c(color_anno, month_anno, weight_anno, condition_anno))
metadata$treatment_time <- as.character(metadata$treatment_time)
col_time <- c("0" = "#dba04d", "15" = "#71db4d", "30" = "#db4d6c", "240" = "#65ebfc")
time_anno <- HeatmapAnnotation("Time (min)" = metadata$treatment_time, col = list("Time (min)" = col_time))
Heatmap(hMat_ordered, show_column_names = F, show_row_names = F, name = "Z-score", cluster_rows = F,
cluster_columns = F, col = col_exp,
top_annotation = c(color_anno, month_anno, weight_anno,time_anno, condition_anno))
# split en columna
split = data.frame(Condition = metadata$condition)
Heatmap(hMat_ordered, show_column_names = F, show_row_names = F, name = "Z-score", cluster_rows = F,
cluster_columns = F, col = col_exp,
top_annotation = c(color_anno,time_anno, condition_anno),
column_split = split)
# supongamos que tenemos informacion sobre los genes, creare una tabla con datos sobre los genes
set.seed(1)
row_metadata <- data.frame("gene" = rownames(hMat),
"type" = c(rep("protein_coding", 34), rep("lncRNA", 16)),
"logFC" = runif(50, min = -4, max = 4))
row_metadata
split_row = data.frame(Type = row_metadata$type)
Heatmap(hMat_ordered, show_column_names = F, show_row_names = F, name = "Z-score", cluster_rows = F,
cluster_columns = F, col = col_exp,
top_annotation = c(color_anno,time_anno, condition_anno),
column_split = split, split = split_row)
#-----Anotacion para el logFC: continuo
col_FC <- colorRamp2(c(min(row_metadata$logFC), 0, max(row_metadata$logFC)),
c("darkgreen", "white", "darkred"))
FC_anno <- rowAnnotation("log2FC" = row_metadata$logFC, col = list("log2FC" = col_FC))
# lo podemos poner a la izquierda o a la derecha
Heatmap(hMat_ordered, show_column_names = F, show_row_names = F, name = "Z-score", cluster_rows = F,
cluster_columns = F, col = col_exp,
top_annotation = c(color_anno,time_anno, condition_anno),
column_split = split, split = split_row,
left_annotation = FC_anno)
#-----Anotacion para el tipo de gen: discreto
col_type <- c("protein_coding" = "#b05fa7",
"lncRNA" = "#f2f249")
type_anno <- rowAnnotation("Gene type" = row_metadata$type, col = list("Gene type" = col_type))
# lo podemos poner a la izquierda o a la derecha
Heatmap(hMat_ordered, show_column_names = F, show_row_names = F, name = "Z-score", cluster_rows = F,
cluster_columns = F, col = col_exp,
top_annotation = c(color_anno,time_anno, condition_anno),
column_split = split, split = split_row,
left_annotation = c(type_anno, FC_anno))
dim(hMat_ordered)
pvalues <- c(runif(40, min = 0.0001, max = 0.05), runif(10, min = 0.05, max = 1))
pvalues <- c(runif(45, min = 0.0001, max = 0.05), runif(5, min = 0.05, max = 1))
pvalues <- sample(c(runif(45, min = 0.0001, max = 0.05),
runif(5, min = 0.05, max = 1)), 50)
# para las anotaciones de boxplot se usa la funcion anno_boxplot()
# se pueden hacer tanto para row, column o ambas, en este caso solo tenemos para row (genes)
box_anno <- anno_boxplot(pvalues, which = c("row"), border = T,
gp = gpar(fill = "#CCCCCC"), ylim = NULL,
outline=T, pch = 1, size = unit(2, "mm"), axis = T)
draw(box_anno)
# para las anotaciones de boxplot se usa la funcion anno_boxplot()
# se pueden hacer tanto para row, column o ambas, en este caso solo tenemos para row (genes)
box_anno <- anno_boxplot(pvalues, which = c("row"), border = T,
gp = gpar(fill = "#CCCCCC"), ylim = NULL,
outline=T, pch = 1, size = unit(2, "mm"), axis = T)
draw(box_anno)
matrix(rnorm(100), 10)
dim(matrix(rnorm(100), 10))
for(i in 1:8) {
significant_pvalues <- runif(40, min = 0.0001, max = 0.05)
non_significant_pvalues <- runif(10, min = 0.05, max = 1)
row_pvalues <- sample(c(significant_pvalues, non_significant_pvalues))
pvalues_matrix[i, ] <- row_pvalues
}
# generar pvalores falsos, tiene que ser una matriz de la misma dimension que nuestros datos
pvalues_matrix <- matrix(nrow = 8, ncol = 50)
for(i in 1:8) {
significant_pvalues <- runif(40, min = 0.0001, max = 0.05)
non_significant_pvalues <- runif(10, min = 0.05, max = 1)
row_pvalues <- sample(c(significant_pvalues, non_significant_pvalues))
pvalues_matrix[i, ] <- row_pvalues
}
# para las anotaciones de boxplot se usa la funcion anno_boxplot()
# se pueden hacer tanto para row, column o ambas, en este caso solo tenemos para row (genes)
box_anno <- anno_boxplot(pvalues_matrix, which = c("row"), border = T,
gp = gpar(fill = "#CCCCCC"), ylim = NULL,
outline=T, pch = 1, size = unit(2, "mm"), axis = T)
draw(box_anno)
draw(box_anno)
# podemos transformar los pvalores para hacerlos mejor visibles
box_anno <- anno_boxplot(-log10(pvalues_matrix), which = c("row"), border = T,
gp = gpar(fill = "#CCCCCC"), ylim = NULL,
outline=T, pch = 1, size = unit(2, "mm"), axis = T)
draw(box_anno)
draw(box_anno)
# podemos transformar los pvalores para hacerlos mejor visibles
box_anno <- anno_boxplot(-log10(pvalues_matrix), which = c("row"), border = T,
# podemos transformar los pvalores para hacerlos mejor visibles
box_anno <- anno_boxplot(-log10(pvalues_matrix), which = c("row"), border = T,
gp = gpar(fill = "#CCCCCC"), ylim = NULL,
outline=T, pch = 1, size = unit(2, "mm"), axis = T,
axis_param = default_axis_param(which))
# podemos transformar los pvalores para hacerlos mejor visibles
box_anno <- anno_boxplot(-log10(pvalues_matrix), which = c("row"), border = T,
gp = gpar(fill = "#CCCCCC"), ylim = NULL,
outline=T, pch = 1, size = unit(2, "mm"), axis = T, axis_param = default_axis_param(which))
# podemos transformar los pvalores para hacerlos mejor visibles
box_anno <- anno_boxplot(-log10(pvalues_matrix), which = c("row"), border = T,
gp = gpar(fill = "#CCCCCC"), ylim = NULL,
outline=T, pch = 1, size = unit(2, "mm"), axis = T)
draw(box_anno)
Heatmap(hMat_ordered, show_column_names = F, show_row_names = F, name = "Z-score", cluster_rows = F,
cluster_columns = F, col = col_exp,
top_annotation = c(color_anno,time_anno, condition_anno),
column_split = split, split = split_row,
left_annotation = c(type_anno, FC_anno),
right_annotation = box_anno)
Heatmap(hMat_ordered, show_column_names = F, show_row_names = F, name = "Z-score", cluster_rows = F,
cluster_columns = F, col = col_exp,
top_annotation = c(color_anno,time_anno, condition_anno),
column_split = split, split = split_row,
left_annotation = c(type_anno, FC_anno),
right_annotation = rowAnnotation(box_anno))
Heatmap(hMat_ordered, show_column_names = F, show_row_names = F, name = "Z-score", cluster_rows = F,
cluster_columns = F, col = col_exp,
top_annotation = c(color_anno,time_anno, condition_anno),
column_split = split, split = split_row,
left_annotation = c(type_anno, FC_anno),
right_annotation = rowAnnotation(pvalue = box_anno))
nrow(hMat_ordered)
nrow(pvalues_matrix)
# generar pvalores falsos, tiene que ser una matriz de la misma dimension que nuestros datos
pvalues_matrix <- matrix(nrow = 50, ncol = 8)
for(i in 1:8) {
significant_pvalues <- runif(40, min = 0.0001, max = 0.05)
non_significant_pvalues <- runif(10, min = 0.05, max = 1)
row_pvalues <- sample(c(significant_pvalues, non_significant_pvalues))
pvalues_matrix[,i ] <- row_pvalues
}
View(pvalues_matrix)
# para las anotaciones de boxplot se usa la funcion anno_boxplot()
# se pueden hacer tanto para row, column o ambas, en este caso solo tenemos para row (genes)
box_anno <- anno_boxplot(pvalues_matrix, which = c("row"), border = T,
gp = gpar(fill = "#CCCCCC"), ylim = NULL,
outline=T, pch = 1, size = unit(2, "mm"), axis = T)
draw(box_anno)
# podemos transformar los pvalores para hacerlos mejor visibles
box_anno <- anno_boxplot(-log10(pvalues_matrix), which = c("row"), border = T,
gp = gpar(fill = "#CCCCCC"), ylim = NULL,
outline=T, pch = 1, size = unit(2, "mm"), axis = T)
draw(box_anno)
Heatmap(hMat_ordered, show_column_names = F, show_row_names = F, name = "Z-score", cluster_rows = F,
cluster_columns = F, col = col_exp,
top_annotation = c(color_anno,time_anno, condition_anno),
column_split = split, split = split_row,
left_annotation = c(type_anno, FC_anno),
right_annotation = rowAnnotation(pvalue = box_anno))
Heatmap(hMat_ordered, show_column_names = F, show_row_names = F, name = "Z-score", cluster_rows = F,
cluster_columns = F, col = col_exp,
top_annotation = c(color_anno,time_anno, condition_anno),
column_split = split, split = split_row,
left_annotation = c(type_anno, FC_anno),
right_annotation = rowAnnotation("-log10(p-value)" = box_anno))
# podemos transformar los pvalores para hacerlos mejor visibles
box_anno <- anno_boxplot(-log10(pvalues_matrix), which = c("row"), border = T,
gp = gpar(fill = "#CCCCCC"), ylim = NULL,
outline=F, pch = 1, size = unit(2, "mm"), axis = T)
draw(box_anno)
Heatmap(hMat_ordered, show_column_names = F, show_row_names = F, name = "Z-score", cluster_rows = F,
cluster_columns = F, col = col_exp,
top_annotation = c(color_anno,time_anno, condition_anno),
column_split = split, split = split_row,
left_annotation = c(type_anno, FC_anno),
right_annotation = rowAnnotation("-log10(p-value)" = box_anno))
